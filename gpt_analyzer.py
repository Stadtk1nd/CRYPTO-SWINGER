# gpt_analyzer.py

import os
import openai

# R√©cup√©ration de la cl√© API OpenAI depuis les variables d‚Äôenvironnement
OPENAI_API_KEY = os.environ.get("OPENAI_API_KEY")

if not OPENAI_API_KEY:
    raise ValueError("‚ùå Cl√© API OpenAI manquante. D√©finissez OPENAI_API_KEY dans les variables d'environnement.")

openai.api_key = OPENAI_API_KEY

def generate_gpt_analysis(symbol, interval,
                          technical_score, technical_details,
                          fundamental_score, fundamental_details,
                          macro_score, macro_details,
                          signal, confidence, buy_price, sell_price):
    """
    G√©n√®re une analyse synth√©tique r√©dig√©e en fran√ßais √† partir des scores et signaux d‚Äôanalyse.
    """
    system_prompt = (
        "Tu es un assistant expert en trading crypto. "
        "Tu sais interpr√©ter les indicateurs techniques, fondamentaux et macro√©conomiques pour produire "
        "des synth√®ses concises et argument√©es, utiles aux traders exp√©riment√©s."
    )

    user_prompt = f"""
Crypto analys√©e : {symbol}
Intervalle de temps : {interval}

üìä Analyse technique (score : {technical_score}) :
{chr(10).join(f"- {detail}" for detail in technical_details)}

üìà Analyse fondamentale (score : {fundamental_score}) :
{chr(10).join(f"- {detail}" for detail in fundamental_details)}

üåç Analyse macro√©conomique (score : {macro_score}) :
{chr(10).join(f"- {detail}" for detail in macro_details)}

üéØ Recommandation algorithmique : {signal.upper()} (confiance : {confidence:.0%})
Prix d‚Äôachat estim√© : ${buy_price:.2f}
Prix de vente estim√© : ${sell_price:.2f}

√Ä partir de ces informations, r√©dige une analyse synth√©tique (5 √† 10 lignes) en fran√ßais,
structur√©e, professionnelle et orient√©e d√©cision. Termine par une recommandation claire.
"""

    try:
        response = openai.ChatCompletion.create(
            model="gpt-4",
            messages=[
                {"role": "system", "content": system_prompt},
                {"role": "user", "content": user_prompt}
            ],
            temperature=0.7,
            max_tokens=600,
        )
        return response["choices"][0]["message"]["content"]

    except Exception as e:
        return f"‚ùå Erreur lors de la g√©n√©ration de l'analyse GPT : {e}"
